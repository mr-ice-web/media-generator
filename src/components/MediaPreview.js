'use client';
import React from 'react';

const PLACEHOLDER_ICON = (
  <div style={{ width: 180, height: 180, display: 'flex', alignItems: 'center', justifyContent: 'center', background: '#f0f0f0', borderRadius: 8, border: '1px solid #ddd', margin: '0 auto' }}>
    <svg width="64" height="64" fill="#bbb" viewBox="0 0 24 24">
      <path d="M21 19V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zm-2 0H5V5h14zm-7-3.5l2.5 3.01L17 15l-4-5-4 5 1.5-1.49z"/>
    </svg>
  </div>
);

export default function MediaPreview({ media, isLoading, error, mode }) {
  const [objectUrl, setObjectUrl] = React.useState(null);
  const [loadingBlob, setLoadingBlob] = React.useState(false);

  React.useEffect(() => {
    if (!media || media.length === 0) {
      setObjectUrl(null);
      return;
    }
    const first = media[0];
    if (!first.url) {
      setObjectUrl(null);
      return;
    }
    // For images, handle blob if not direct
    if (mode === 'image') {
      const isDirect = /\.(jpg|jpeg|png|gif|webp|bmp)$/i.test(first.url);
      if (isDirect) {
        setObjectUrl(first.url);
        return;
      }
      setLoadingBlob(true);
      fetch(first.url)
        .then(res => res.blob())
        .then(blob => {
          const url = URL.createObjectURL(blob);
          setObjectUrl(url);
        })
        .catch(() => {
          setObjectUrl(null);
        })
        .finally(() => setLoadingBlob(false));
      // Cleanup
      return () => {
        if (objectUrl && objectUrl !== first.url) {
          URL.revokeObjectURL(objectUrl);
        }
      };
    } else {
      // For video, just use the url
      setObjectUrl(first.url);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [media && media[0]?.url, mode]);

  // Always show preview box, with placeholder if no media
  return (
    <div className="media-preview-container" style={{ marginBottom: 24 }}>
      <div style={{ width: 280, height: 280, margin: '0 auto', display: 'flex', alignItems: 'center', justifyContent: 'center', background: '#fafafa', borderRadius: 8, border: '1px solid #ddd', overflow: 'hidden' }}>
        {isLoading ? (
          <span style={{ color: '#888' }}>{mode === 'image' ? 'Generating...' : 'Generating Video...'}</span>
        ) : objectUrl ? (
          mode === 'image' ? (
            <img src={objectUrl} alt="Generated by Runware" style={{ maxWidth: '100%', maxHeight: '100%', objectFit: 'contain' }} />
          ) : (
            <video src={objectUrl} controls style={{ maxWidth: '100%', maxHeight: '100%' }} />
          )
        ) : (
          PLACEHOLDER_ICON
        )}
      </div>
      {objectUrl && mode === 'image' && (
        <div style={{ marginTop: 8 }}>
          <a href={objectUrl} download="generated-image.jpg" target="_blank" rel="noopener noreferrer">
            Download Image
          </a>
        </div>
      )}
      {objectUrl && mode === 'video' && (
        <div style={{ marginTop: 8 }}>
          <a href={objectUrl} download="generated-video.mp4" target="_blank" rel="noopener noreferrer">
            Download Video
          </a>
        </div>
      )}
      {error && <p className="error-message">Error: {error}</p>}
    </div>
  );
}