'use client';
import React from 'react';

const PLACEHOLDER_ICON = (
  <div style={{ width: 180, height: 180, display: 'flex', alignItems: 'center', justifyContent: 'center', background: '#f0f0f0', borderRadius: 8, border: '1px solid #ddd', margin: '0 auto' }}>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 125" width="80" height="80">
      <defs>
        <linearGradient id="aiStarsGradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stopColor="#eeff00ff"/>
          <stop offset="50%" stopColor="#00e5ffff"/>
          <stop offset="100%" stopColor="#b81effff"/>
        </linearGradient>
      </defs>
      <path d="m90.64,59.09l-16.25-7.09c-3.93-1.71-7.06-4.85-8.77-8.77l-7.09-16.25c-.55-1.26-2.34-1.26-2.89,0l-7.09,16.25c-1.71,3.93-4.85,7.06-8.77,8.77l-16.27,7.1c-1.26.55-1.26,2.33,0,2.88l16.55,7.32c3.92,1.73,7.04,4.88,8.73,8.82l6.86,15.94c.54,1.27,2.34,1.27,2.89,0l7.08-16.22c1.71-3.93,4.85-7.06,8.77-8.77l16.25-7.09c1.26-.55,1.26-2.34,0-2.89Z" fill="url(#aiStarsGradient)"/>
      <path d="m25.28,48.51l3.32-7.61c.8-1.84,2.27-3.31,4.11-4.11l7.62-3.32c.59-.26.59-1.1,0-1.35l-7.62-3.32c-1.84-.8-3.31-2.27-4.11-4.11l-3.32-7.62c-.26-.59-1.1-.59-1.35,0l-3.32,7.62c-.8,1.84-2.27,3.31-4.11,4.11l-7.63,3.33c-.59.26-.59,1.09,0,1.35l7.76,3.43c1.84.81,3.3,2.29,4.09,4.13l3.22,7.47c.26.59,1.1.6,1.35,0Z" fill="url(#aiStarsGradient)"/>
      <path d="m39.89,13.95l4.12,1.82c.98.43,1.75,1.22,2.17,2.19l1.71,3.97c.14.32.58.32.72,0l1.76-4.04c.43-.98,1.21-1.76,2.18-2.18l4.04-1.76c.31-.14.31-.58,0-.72l-4.04-1.76c-.98-.43-1.76-1.21-2.18-2.18l-1.76-4.04c-.14-.31-.58-.31-.72,0l-1.76,4.04c-.43.98-1.21,1.76-2.18,2.18l-4.05,1.77c-.31.14-.31.58,0,.72Z" fill="url(#aiStarsGradient)"/>
    </svg>
  </div>
);

export default function MediaPreview({ media, isLoading, error, mode }) {
  const [objectUrl, setObjectUrl] = React.useState(null);
  const [loadingBlob, setLoadingBlob] = React.useState(false);

  React.useEffect(() => {
    if (!media || media.length === 0) {
      setObjectUrl(null);
      return;
    }
    const first = media[0];
    if (!first.url) {
      setObjectUrl(null);
      return;
    }
    // For images, we may need to fetch the blob and create an object URL
    if (mode === 'image') {
      const isDirect = /\.(jpg|jpeg|png|gif|webp|bmp)$/i.test(first.url);
      if (isDirect) {
        setObjectUrl(first.url);
        return;
      }
      setLoadingBlob(true);
      fetch(first.url)
        .then(res => res.blob())
        .then(blob => {
          const url = URL.createObjectURL(blob);
          setObjectUrl(url);
        })
        .catch(() => {
          setObjectUrl(null);
        })
        .finally(() => setLoadingBlob(false));
      // Cleanup
      return () => {
        if (objectUrl && objectUrl !== first.url) {
          URL.revokeObjectURL(objectUrl);
        }
      };
    } else {
      // For video, just use the url
      setObjectUrl(first.url);
    }
    
  }, [media && media[0]?.url, mode]);

  // Creating a preview box that always shows, with placeholder if no media
  return (
    <div className="media-preview-container" style={{ marginBottom: 24 }}>
      <div
        style={
          mode === 'video'
            ? {
                width: 640,
                height: 360,
                margin: '0 auto',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                background: '#fafafa',
                borderRadius: 8,
                border: '1px solid #ddd',
                overflow: 'hidden',
                aspectRatio: '16/9',
              }
            : {
                width: 280,
                height: 280,
                margin: '0 auto',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                background: '#fafafa',
                borderRadius: 8,
                border: '1px solid #ddd',
                overflow: 'hidden',
              }
        }
      >
        {isLoading ? (
          <span style={{ color: '#888' }}>{mode === 'image' ? 'Generating...' : 'Generating Video...'}</span>
        ) : objectUrl ? (
          mode === 'image' ? (
            <img src={objectUrl} alt="Generated by Runware" style={{ maxWidth: '100%', maxHeight: '100%', objectFit: 'contain' }} />
          ) : (
            <video src={objectUrl} controls style={{ maxWidth: '100%', maxHeight: '100%', aspectRatio: '16/9', background: '#000' }} />
          )
        ) : (
          PLACEHOLDER_ICON
        )}
      </div>
      {objectUrl && mode === 'image' && (
        <div style={{ marginTop: 8 }}>
          <a href={objectUrl} download="generated-image.jpg" target="_blank" rel="noopener noreferrer">
            Download Image
          </a>
        </div>
      )}
      {objectUrl && mode === 'video' && (
        <div style={{ marginTop: 8 }}>
          <a href={objectUrl} download="generated-video.mp4" target="_blank" rel="noopener noreferrer">
            Download Video
          </a>
        </div>
      )}
      {error && <p className="error-message">Error: {error}</p>}
    </div>
  );
}